#!/bin/bash
#set -x
trap "exit 1" SIGINT SIGHUP SIGTERM

export LANGUAGE="C"
export LC_ALL="C"
export LC_COLLATE="C"
export LC_CTYPE="en_US.UTF-8"
export LC_TIME="C"
export LANG="C"

INITDIR=boot-images/initrd
PKGDIR=boot-images/pkg-packages
DEVDIR=./packages/base/dev
MODDIR=boot-images/module-packages
PACDIR=./tmp-tree/packages
MAXIMAGE=17864320
TOOLSDIR=./utils/tools
KERNEL_PARAMETERS=""
CONFDIR=./conf
DEF_SQUASHOPT="-always-use-fragments -no-recovery -no-exports"
export TOOLSDIR

ignore_libs='libcrypto.so.1.0.2|libssl.so.1.0.2|libcrypto.so.1.0.0|libssl.so.1.0.0|libKF5'
export ignore_libs

grub_modules="
password_pbkdf2
progress
part_msdos
echo
cat
sleep
all_video
boot
chain
configfile
ext2
fat
exfat
font
gfxmenu
gfxterm
gzio
help
linux
ls
normal
png
jpeg
reboot
regexp
search
search_fs_file
search_label
test
videoinfo
"

. packages/base/etc/thinstation.functions
. packages/base/etc/thinstation.env
. packages/base/etc/thinstation.defaults
. thinstation.conf.buildtime
export -f is_enabled

PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/sbin:/ts/bin

# set some defaults for builds that would produce unexpected results for legacy build scripts otherwise.
ts_mesa_3d=enabled
ts_localpkgs=true

# Show Command line Parameters

showhelp()
{
	echo "--license ACCEPT      Accept all licenses automatically"
	echo "--help                Show help then exit"
	echo "--autodl              Download all commercial addins automatically"
	echo "--buildtime FILENAME  Add buildtime conf file to squashfs image and build boot images only"
	echo "--kernel VERSION      Use this version of the kernel (rather than the default)"
	echo "--noimages            Build process but don't generate boot images"
	echo "--regenconf           Copy over default config example files again"
	echo "--removeall           Remove all commercial binaries then exit"
	echo "--savedir             Saves the tmp-tree directory for debugging and development purposes"
	echo "--savepkglist         Saves the package list files for documentation purposes"
	echo "--update              Will run all package update scripts <package>/build/update"
	echo "--allmodules          Will install all available kernel modules into the image"
}

## Remove Temp files

unmount_tmp()
{
	sleep 3
	if mounted ./tmp-tree/proc; then
		umount -f ./tmp-tree/proc
	fi
	if mounted ./tmp-tree/dev; then
		umount -f ./tmp-tree/dev
	fi
}

remove_files()
{
#	But only if we don't want to save them for debugging
	if [ -z "$SAVEDIR" ]; then
		if [ -e ./temp-efi ]; then
			rmdir ./temp-efi
		fi
		if [ -e ./tmp-tree ] ; then
			unmount_tmp
			rm -Rf ./tmp-tree/*
			rmdir ./tmp-tree
		fi
		if [ -e ./fastboot-tmp ] ;then
			rm -rf ./fastboot-tmp
		fi
		if [ -e ./liblist ] ; then
			rm ./liblist
		fi
		if [ -e ./packages.list ]; then
			rm ./packages.list
		fi
		if [ -e ./modules.list ]; then
			rm ./modules.list
		fi
		if [ -e ./wget_tmp ] ; then
			rm -Rf ./wget_tmp
		fi
		if [ -e ./liblist.tmp ] ; then
			rm ./liblist.tmp
		fi
		if [ -e $MODDIR ] ; then
			rm -R $MODDIR
		fi
		if [ -e ./build.image ] ; then
			rm ./build.image
		fi
		if [ -e /ts/firmware_found ]; then
			rm -rf /ts/firmware_found
		fi
		if [ -e /ts/firmware_notfound ]; then
			rm -rf /ts/firmware_notfound
		fi
		if [ -e /tmp/block.package ]; then
			rm -rf /tmp/block.package
		fi
	fi
}

remove_old_boot_files()
{
        if [ -e boot-images/initrd/added.files ]; then
                cat boot-images/initrd/added.files |sort -u | while read file; do
                        rm "$file"
                        rmdir --ignore-fail-on-non-empty -p `dirname "$file"`
                done
                rm boot-images/initrd/added.files
        fi
}

## Add PKG Files to local Storage

addpkgs()
{
  if ls $1/*.pkg > /dev/null 2>&1 ; then
    rm $1/*.pkg
  fi
  if is_enabled $ts_localpkgs; then
    if ls $PKGDIR/*.pkg > /dev/null 2>&1 ; then
	mkdir -p $1
    	ln $PKGDIR/*.pkg $1
    fi
  fi
}

mounted()
{
	mountpoint -q $1
	return $?
}

lib_in_path()
{
	for lpath in `cat lpaths.tmp` $filepath; do
		if [ -e ./tmp-tree$lpath/$1 ] \
		|| [ -e $pkgname$lpath/$1 ] \
		|| [ -e ./tmp-tree/lib64/*/$1 ] \
		|| [ -e $pkgname/lib64/*/$1 ] \
		|| [ -e ./tmp-tree/libexec/$1 ] \
		|| [ -e ./tmp-tree/libexec/*/$1 ] \
		|| [ -e $pkgname/libexec/$1 ] \
		|| [ -e $pkgname/libexec/*/$1 ]; then
			return 0
		fi
	done
	if [ "`echo $filepath |sed -e 's|/|/\n|g' |grep -c '/'`" -gt "2" ]; then
		likely_rpath=`echo $filepath |cut -d '/' -f1-3`
		if [ -n "`find  $pkgname$likely_rpath -name $1`" ]; then
			return 0
		fi
	fi
	return 1
}
export -f lib_in_path

calculate_lib_dependencies()
{
	unset DISPLAYED
	filename=$1
	(objdump -x $filename 2>/dev/null |grep -e NEEDED |cut -c 24- |grep -Ev "$ignore_libs") \
	|while read libfile; do
		filepath=`dirname $filename | sed -e "s,$pkgname,,"`
		export filepath
		if ! lib_in_path $libfile && [ ! -e $pkgname/lib64/$libfile ]; then
			if [ "$DISPLAYED" != "TRUE" ]; then
				echo "Adding library dependencies for `basename $filename`"
				DISPLAYED=TRUE
			fi
			libsource="`find /usr/lib /usr/lib64 -name $libfile |grep -v vmware |tail -n1`"
			if [ -n "$libsource" ] && [ -e $libsource ]; then
				echo -e "\t\t\t$libfile"
				if [ ! -e $pkgname/lib64 ]; then
					mkdir -p $pkgname/lib64
				fi
				linkdest=`readlink $libsource`
				if [ -n "$linkdest" ]; then
					[ ! -e $pkgname/lib64/$libfile ] \
					&& $cputil `dirname $libsource`/$linkdest ./tmp-tree/lib64/$libfile 2>/dev/null \
					&& echo "$pkgname/lib64/$libfile" >> liblist.added
				else
					[ ! -e $pkgname/lib64/$libfile ] \
					&& $cputil $libsource ./tmp-tree/lib64/$libfile 2>/dev/null \
					&& echo "$pkgname/lib64/$libfile" >> liblist.added
				fi
			else
				echo "Could not find $libfile !"
			fi
		fi
	done
}
export -f calculate_lib_dependencies

lib_dependencies()
{
	echo -e "\nAdding Library Dependencies\n"

	if [ -e ./tmp-tree/etc/ld.so.conf ]; then
		cat ./tmp-tree/etc/ld.so.conf |grep -v include > lpaths.tmp
	fi
	if [ -e ./tmp-tree/etc/ld.so.conf.d ] && [ -n "`ls -A ./tmp-tree/etc/ld.so.conf.d`" ]; then
		cat ./tmp-tree/etc/ld.so.conf.d/* >> lpaths.tmp
	fi
	for pkgname in `echo "./tmp-tree" && find $PKGDIR -mindepth 1 -maxdepth 1`; do
                export pkgname
		if is_enabled $ts_stripelf; then
			export cputil="cp -a"
		else
			export cputil=ln
		fi
		find $pkgname -type f |grep -Ev 'lib32|bin32' > filelist
		file -e encoding -e tokens -e compress -e ascii -e apptype -e tar -e cdf -f filelist -n -r \
		|grep -e ELF \
		|cut -d: -f1 > liblist.final 2>/dev/null
		rm filelist
		while [ -s liblist.final ]; do
			if is_enabled $ts_singlethread; then
				procs=1
			else
				procs=`nproc`
				let procs=( procs * 2 )
			fi
			cat liblist.final |sort -u|sort -R | \
			xargs -P $procs -I {} bash -c 'calculate_lib_dependencies "$@"' _ {}
			rm liblist.final
			if [ -e liblist.added ]; then
				mv liblist.added liblist.final
			fi
		done
	done
	ldconfig -X -r tmp-tree 2>/dev/null
	rm lpaths.tmp
}

copy_module()
{
	unset copied
	local rpath=`find /lib/modules/$2 -name $1 -printf %h |cut -d "/" -f5-`
	local src=/lib/modules/$2/$rpath/$1
	local dest=$3/lib/modules/$2/$rpath
	if [ ! -e $src ]; then
		if grep /lib/modules/$2/modules.builtin -e ${1%.xz} -q; then
			echo "Module ${1%.ko.xz} already builtin"
			return 3
		else
			echo "Notice! Module ${1%.ko.xz} not found for kernel $2"
			return 1
		fi
	fi
	if [ ! -e $dest/$1 ]; then
		mkdir -p $dest
		ln $src $dest/$1 > /dev/null 2>&1
		if [ "$?" == "0" ]; then
			copied="$dest/$1"
			return 0
		fi
	else
		return 0
	fi
	return 1
}

list_all_packages()
{
	echo "./tmp-tree"
	find $MODDIR/ -mindepth 1 -maxdepth 1
	find $PKGDIR/ -mindepth 1 -maxdepth 1
}

list_mod_packages()
{
	echo "./tmp-tree"
	find $MODDIR/ -mindepth 1 -maxdepth 1
}

module_dependencies()
{
echo -e "\nAdding modules that are dependencies of selected modules"
for pkgname in `list_all_packages`; do
	if [ -e $pkgname/lib64/modules/$KERNVER ]; then
		find $pkgname/lib64/modules/$KERNVER -name \*.ko.xz > ./modules.list
		while [ -s ./modules.list ]; do
			for module in `cat modules.list`; do
				allfirm `basename $module`
				depends="`modinfo -F depends $module |sed -e 's/,/ /g'`"
				# Checks for already existing modules
				for depend in $depends; do
					if [ -z "`find ./tmp-tree/lib64/modules/$KERNVER -name ${depend}.ko.xz`" ] && \
					   [ -z "`find $pkgname/lib64/modules/$KERNVER -name ${depend}.ko.xz`" ]; then
						needed="$needed ${depend}.ko.xz"
					fi
				done
				if [ -n "$needed" ]; then
					echo "Adding dependency in `basename $pkgname` for module `basename $module .ko.xz`"
					for depend in $needed; do
						echo -e "\t\t\t\t${depend%.ko.xz}"
						if copy_module $depend $KERNVER $pkgname; then
							echo $copied >> modules.copied
							allfirm $depend
						fi
					done
				fi
				unset needed
			done
			rm modules.list
			if [ -e modules.copied ]; then
				mv modules.copied modules.list
			fi
		done
		rm -f modules.list
	fi
done
}

find_package()
{
	pkgtype=packages
	if [ -n "$2" ]; then pkgtype=$2; fi

	for pkgroot in $TSWRKNG $XTRWRKNG; do
		if [ -d $pkgroot/$pkgtype/$1 ]; then
			pkgpath=$pkgroot/$pkgtype/$1
			return 0
		fi
	done

	return 1
}

module_package_dependencies()
{
	# Adding additional modules and packages which are dependencies of other modules
	echo -e "\nAdding $KERNVER module dependencies on other modules and packages not picked up by depmod"
	for pkgname in `list_mod_packages`; do
		(ls ./kernel/dependencies_module/ ) |
		while read module; do
			if [ -n "`find ./tmp-tree/lib/modules/$KERNVER -name ${module}.ko.xz`" ] || \
			   [ -n "`find $pkgname/lib/modules/$KERNVER -name ${module}.ko.xz`" ]; then
				(cat ./kernel/dependencies_module/$module ) |
				while read type name; do
					case $type in
						module)
							if [ -z "`find ./tmp-tree/lib/modules/$KERNVER -name ${name}.ko.xz`" ] && \
							   [ -z "`find $pkgname/lib/modules/$KERNVER -name ${name}.ko.xz`" ]; then
								if ! is_enabled $DISPLAYED; then
									echo "Adding module dependencies for $module"
									DISPLAYED=true
								fi
								echo -e "\t\t\t\tModule : $name"
								copy_module ${name}.ko.xz $KERNVER $pkgname
								touch /tmp/dirty
							fi
						;;
						firmware)
							if is_enabled $ts_allfirmware; then
								if [ ! -e "./tmp-tree/lib/firmware/$name" ]; then
									if ! is_enabled $DISPLAYED; then
										echo "Adding firmware dependencies for $module"
										DISPLAYED=true
									fi
									copy_firmware ${name}
								fi
							fi
						;;
						package)
							if [ ! -e $PACDIR/$name.package ] && \
							   [ ! -e $PACDIR/$name.pkg ]; then
								if find_package $name ; then
									if ! is_enabled $DISPLAYED; then
										echo "Adding package dependencies for $module"
										DISPLAYED=true
									fi
									echo "cp -Rp --remove-destination $pkgpath/* ./tmp-tree > /dev/null 2>&1">>\
										$PACDIR/$name.package
									touch /tmp/dirty
									echo -e "\t\t\t\tPackage : $name"
								else
									echo "Not Found $name!!"
								fi
							elif [ -z "`find ./tmp-tree/lib/modules -name ${module}.ko.xz`" ] && \
								 [ -n "`find $pkgname/lib/modules/$KERNVER -name ${module}.ko.xz`" ] && \
								 [ ! -e $PACDIR/$name.pkg ]; then
								if find_package $name ; then
									echo "building-pkg $name"
									echo -e "cp -Rp $pkgpath/$name $PKGDIR" >> $PACDIR/$name.pkg
									touch /tmp/dirty
								else
									echo "Not Found $name!!"
								fi
							fi
						;;
						*)
							continue
						;;
					esac
				done
				unset DISPLAYED
			fi
		done
	done
}

strip_files()
{
	if is_enabled $ts_stripelf;then
		echo -e "\nStripping Enabled"
		rampre="`du -s ./tmp-tree|cut -f1`"
		echo -e "\tRAM Usage before stripping\t$rampre KiloBytes"
		for i in `find tmp-tree -type f |grep -v -f exclusions |xargs file |grep -e ELF |grep -v /lib64/modules/ |grep -v e3$ |cut -d ":" -f1` ;
			do
				strip --strip-all -R.note -R.comment $i
			done
		rampost="`du -s ./tmp-tree|cut -f1`"
		echo -e "\tRAM Usage after stripping\t$rampost KiloBytes"
		echo -e "\tTotal RAM Savings\t\t$(( $rampre - $rampost )) KiloBytes\n"
	fi
}

make_initrd()
{
   cd tmp-tree
	if [ "$ts_fastboot" == "true" ] || [ "$ts_fastboot" == "lotsofmem" ] ;then
		echo -e "\nMaking initramfs - Fastboot Enabled"
		../fastboot/fastboot-mangle "$INITDIR" "$ts_fastboot" "$ts_hardlinkfs" "$ts_squashopt"
	else
		if [ -e $INITDIR/lib.squash ] ; then
			rm $INITDIR/lib.squash
		fi
		echo -e "\nMaking initramfs"
	fi
	echo -e "\tFixing-Up links"
	rm -f usr/bin usr/sbin usr/lib usr/lib64 usr/icons usr/X11R7 usr/share usr/etc usr/local share usr/libexec
	ln -sf /bin usr/bin
	ln -sf /sbin usr/sbin
	ln -sf /lib64 usr/lib64
	ln -sf /lib64 usr/lib
	ln -sf /libexec usr/libexec
	ln -sf /etc usr/etc
	ln -sf /lib64 usr/share
	ln -sf /lib64 share
	ln -sf / usr/X11R7
	ln -sf /lib64/icons usr/icons
	ln -sf / usr/local

	if [ "$ts_hardlinkfs" == "true" ]; then
		hardlink .
	fi
	if [ "$ts_sametimestmp" == "true" ]; then
		timestamp="`date +%Y%m%d`0000"
		echo -e "\tSetting all timestamps to $timestamp"
		for file in `find .`; do
			touch -c -h -t $timestamp $file
		done
	fi
	if [ "$ts_initrdcmd" == "xz" ]; then
		ts_initrdcmd="xz --threads=0 --check=crc32"
	fi
	if [ "$ts_initrdcmd" == "squashfs" ]; then
		mksquashfs . ../$INITDIR/initrd $ts_squashopt $DEF_SQAUSHOPT
	elif [ "$ts_initrdcmd" == "none" -o "$ts_initrdcmd" == "" ]; then
		get_cap
		find . -print0 | cpio --null -oV --format=newc > ../$INITDIR/initrd
	else
		get_cap
		find . -print0 | cpio --null -oV --format=newc | $ts_initrdcmd > ../$INITDIR/initrd
	fi
	cd ..
   chmod 755 $INITDIR/initrd
   IMAGESIZE=`du -k $INITDIR/initrd | cut -f1`
   if [ $IMAGESIZE -gt $MAXIMAGE ] ; then
           echo "ERROR, Image file is too Big, maximum size is $MAXIMAGE remove"
           echo "some packages!"
           echo "Build Aborted!!"
           echo
           rm $INITDIR/initrd
           remove_files
           exit 1
   fi
}

get_cap()
{
# Specify the root directory of the filesystem to scan
ROOT_DIR="."

# Output file to store capabilities
CAP_FILE="./etc/filecaps"

# Make sure the output file is empty or does not exist
> "$CAP_FILE"

# Find all files and check for capabilities, then save them to the CAP_FILE
find "$ROOT_DIR" -type f -exec getcap {} + | grep -v '^$' > "$CAP_FILE"
}

package_dependencies ()
{
	ls $PACDIR/*.$1 > packages.list 2>/dev/null
	while [ -s packages.list ]; do
		(cat packages.list ) |
		while read filename; do
			package=`basename $filename .$1`
			if find_package $package && [ -s $pkgpath/dependencies ] ; then
				cat $pkgpath/dependencies |grep -e "!" |sed -e 's/!//g' >> /tmp/block.package
				(cat $pkgpath/dependencies |grep -v ^# |grep -vf /tmp/block.package) |
				while read name cross; do
					if ! find_package $name; then
						if ! is_enabled $DISPLAYED; then
							echo "Adding dependent packages of $package:"
							DISPLAYED=TRUE
						fi
						echo "                              Not found: $name"
					elif	[ "$1" = "package" ] || \
						[ "$name" = "base" ]; then
						if	[ ! -e $PACDIR/$name.package ] && \
							[ ! -e $PACDIR/$name.pkg ]; then
							if	[ -e $PACDIR/$cross.package ] || \
								[ -e $PACDIR/$cross.pkg ] || \
								[ -z "$cross" ]; then
								if ! is_enabled $DISPLAYED; then
									echo "Adding dependent packages of $package:"
									DISPLAYED=TRUE
								fi
								echo "                              package $name"
								echo "cp -Rp --remove-destination $pkgpath/* ./tmp-tree > /dev/null 2>&1">>\
									$PACDIR/$name.package
								echo $name.package >> packages.added
								touch /tmp/dirty
							fi
						fi
					elif [ "$1" = "pkg" ] ; then
						if	[ ! -e $PACDIR/$name.package ] && \
							[ ! -e $PACDIR/$name.pkg ]; then
							if	[ -e $PACDIR/$cross.package ] || \
								[ -e $PACDIR/$cross.pkg ] || \
								[ -z "$cross" ]; then
								if ! is_enabled $DISPLAYED; then
									echo "Adding Dependent Pkgs of $package:"
									DISPLAYED=TRUE
								fi
								echo "                         pkg $name"
								echo -e "cp -Rp --remove-destination $pkgpath $PKGDIR" >>\
									$PACDIR/$name.pkg
								echo $name.pkg >> packages.added
								touch /tmp/dirty
							fi
						fi
					fi
				done
				unset DISPLAYED
			elif [ ! -e $pkgpath/dependencies ]; then
				echo "Not Found $package dependency!!"
			fi
		done
		rm packages.list
		if [ -e packages.added ]; then
			mv packages.added packages.list
		fi
	done
	rm -f packages.list
}

package_module_dependencies()
{
	# Adding additional modules which are dependencies of packages
	echo -e "\nAdding $KERNVER module dependencies on other packages"
	(ls ./kernel/dependencies_package/ ) |
	while read name; do
		(cat ./kernel/dependencies_package/$name ) |
		while read module; do
			if [ -e $PACDIR/$name.package ]; then
				if [ -z "`find ./tmp-tree/lib/modules/$KERNVER -name ${module}.ko.xz`" ]; then
					echo "Package : $name   Module: $module"
					copy_module ${module}.ko.xz $KERNVER ./tmp-tree
					if [ "$?" == "0" ]; then
						touch /tmp/dirty
					fi
				fi
			elif [ -e $PACDIR/$name.pkg ]; then
				if [ -z "`find $PKGDIR/$name/lib/modules/$KERNVER -name ${module}.ko.xz`" ]; then
					echo "Pkg     : $name   Module: $module"
					copy_module ${module}.ko.xz $KERNVER $PKGDIR/$name
					if [ "$?" == "0" ]; then
						touch /tmp/dirty
					fi
				fi
			fi
		done
	done
}

get_file ()
{
    URL=$1
    filetype=`echo $1 | cut -d: -f1`
    filepath=`echo $1 | cut -d: -f2`
    if [ -n "$3" ] ; then
	outfile=$3
    else
	outfile=`basename $URL`
    fi

    case `make_caps $filetype` in
    HTTP|HTTPS|FTP|FTPS)
	if [ -e $PACDIR/downloads.param ] ; then
            . $PACDIR/downloads.param
	fi
	if [ -n "$ts_downloads" ] && [ -e "$ts_downloads/$outfile" ]; then
	    cp $ts_downloads/$outfile $2/$outfile
	else
	echo -e "\nDownloading from Net....."
        if [ ! -z "$ts_httpproxy" ] ; then
            echo "Using proxy $http_proxy"
		if ! wget -t 1 -N $URL -O $2/$outfile -e http_proxy=$ts_httpproxy $ts_wgetopts ; then
	                if ! wget -t 1 -N $URL -O $2/$outfile -e http_proxy=$ts_httpproxy $ts_wgetopts ; then
        	                echo -e "\nError has occured downloading file"
                	        echo -e "Build Aborted\n"
                        	remove_files
	                        exit 1
        	        fi
		fi
        else
            echo "Using system proxy, or not using any proxy to connect to Internet."
                if ! wget -t 1 -N $URL -O $2/$outfile $ts_wgetopts ; then
			if ! wget -t 1 -N $URL -O $2/$outfile $ts_wgetopts ; then
	                        echo -e "\nError has occured downloading file"
        	                echo -e "Build Aborted\n"
                	        remove_files
                        	exit 1
			fi
                fi
        fi
	if [ -n "$ts_downloads" ]; then
	    cp $2/$outfile $ts_downloads/$outfile
	fi
	fi
    ;;
    FILE)
	if ! cp $filepath $2/$3 ; then
	    echo -e "\nError has occured copying file"
	    echo -e "Build Aborted\n"
	    remove_files
	    exit 1
	fi
    ;;
    NONE)
	 echo blah >/dev/null
    ;;
    *)
	echo -e "\nCan't determine installation type, should be http(s): or ftp(s) or file:"
	echo -e "Build Aborted\n"
	remove_files
	exit 1
    ;;
    esac
}

web_package ()
{
    URL=$1
    package=$2
    filename=`make_caps $2`

    if find_package $package ; then
      if [ -e $PACDIR/httpproxy.param ] ; then
        . $PACDIR/httpproxy.param
      fi
      echo -e "\nINSTALLING $filename"
      if [ -n "$AUTODL" ] ; then
        CHOICE="Y"
      else
	echo -e "$filename is not installed, we need to setup binary file."
        echo -e "This only needs to be done once.\n"
        echo "Continue? (Y/N)"
        read CHOICE
        CHOICE=`make_caps $CHOICE`
      fi

      if [ "$CHOICE" = "Y" ] ; then
 	mkdir ./wget_tmp
	get_file $URL ./wget_tmp
	if $pkgpath/build/install $URL ; then
	  touch $pkgpath/build/installed
	  echo -e "$package: Setup Complete"
	else
	  echo -e "\nError has occured while installing package $package"
       	  echo -e "Build Aborted\n"
	  remove_files
	  exit 1
	fi
	rm -Rf ./wget_tmp
      fi
    else
	  echo "Error has occured"
	  echo "$package does not exist in packages directory"
          echo -e "Build Aborted\n"
	  remove_files
          exit 1
    fi
}

## Add boot splash image
splash_setup()
{
	if [ -n "$ts_bootresolution" ]; then
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS video=${ts_bootresolution}"
	fi
	if is_enabled $ts_bootlogo; then
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS splash"
	fi
}

write_locale()
{
        echo "locale: $name"
        localedef -i $inputfile -f $charmap $name --prefix=./tmp-tree
}

sample_configuration()
{
	# Building Sample Thinstation.conf file
	echo -e "\nBuilding Sample Thinstation.conf File\n"

	mkdir -p ./tmp-tree/conf
	echo > ./thinstation.conf.sample
	for filename in `find $PKGDIR -maxdepth 1 -name "*" && echo "./tmp-tree"`; do
		if [ -e $filename/build/conf ] ; then
			cp $filename/build/conf/* ./tmp-tree/conf
		fi
	done
	for filename in `ls ./tmp-tree/conf | sort`; do
		cat ./tmp-tree/conf/$filename >> ./thinstation.conf.sample
	done
}

locales()
{
	echo -e "\nAdding locales to archive.\n"
	# Removes extended locale libs if not selected
	if [ -n "`find ./tmp-tree/build -maxdepth 1 -name \*.template`" ]; then
		for localedef in `cat ./tmp-tree/build/*.template`; do
			inputfile=`echo $localedef|cut -d , -f1`
			charmap=`echo $localedef|cut -d , -f2`
			name=`echo $localedef|cut -d , -f3`
		        if is_enabled $ts_fulllocales ; then
				write_locale
			elif [ "$charmap" == "UTF-8" ]; then
				write_locale
			fi
		done
	fi
}

allfirm()
{
	if is_enabled $ts_allfirmware; then
		local fmodule=`find /lib/modules/$KERNVER -name $1`
		local module=`basename $fmodule`
		firmlist=`modinfo -F firmware $fmodule`

		mkdir -p /ts/firmware_found
		mkdir -p /ts/firmware_notfound
		rm -rf /ts/firmware_cache/$module
		rm -rf /ts/firmware_notfound/$module

		if [ -n "$firmlist" ]; then
			echo "Adding extra module firmware for $module"
			for firmware in $firmlist; do
				copy_firmware $firmware
				result=$?
				if [ "$result" == "0" ]; then
					echo "$firmware" >> /ts/firmware_found/$module
				elif [ "$result" == "2" ]; then
					echo "$firmware" >> /ts/firmware_notfound/$module
				fi
			done
		fi
	fi
}

keymaps()
{
    for filename in `find $PACDIR -maxdepth 1 -name "keymaps-*"`
    do
	package=`basename $filename`
	keymap=${package%%.*}
	if [ -n "$xkeymap" ] ; then
	    xkeymap=$xkeymap,${keymap##*-}
	else
	    xkeymap=${keymap##*-}
	fi
    done
    echo "XKEYBOARD=$xkeymap" >> ./tmp-tree/etc/thinstation.defaults


# Removes uneeded keymap package types
# Also places the keymap components in the correct package

echo -e "\nChecking if extended locale support is enabled\n"

for packagename in x-common base rdesktop blackbox ica_wfc
do
	if [ -e $PACDIR/$packagename.pkg ]; then
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
		 echo "Coping extended $packagename to pkg file"
	         cp -a $filename/$packagename/* $PKGDIR/$packagename
	         rm -R $filename/$packagename
               fi
           done
	elif [ -e $PACDIR/$packagename.package ] ; then
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
		 echo "Coping extended $packagename to inbuilt image"
	         cp -a $filename/$packagename/* ./tmp-tree
	         rm -R $filename/$packagename
               fi
           done
	else
	   for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*" && echo "./tmp-tree"`
	   do
	       if [ -e $filename/$packagename ] ; then
	         rm -R $filename/$packagename
	       fi
           done
	fi
done

# Checks for and removes any remaining keymap.pkg files
# It does this as keymaps are merged into there parent files

for filename in `find $PKGDIR -maxdepth 1 -name "keymaps-*"`
do
	rm -R $filename
	keymapname=`basename $filename`
	rm $PACDIR/$keymapname.pkg
done
}

copy_firmware()
{
	if [ -n "$2" ]; then
		firmfiles=`find -L /lib/firmware/ -name $1\* | grep $2`
	else
		firmfiles=$(find -L /lib/firmware/`dirname $1` -name `basename $1`\* 2>/dev/null)
	fi
	if [ -n "$firmfiles" ]; then
		for firmfile in $firmfiles; do
			firmpath=$(echo "./tmp-tree${firmfile}" |sed 's|/lib/|/lib64/|g')
			if [ -e $firmfile ]; then
				if [ -n `readlink $firmfile` ]; then
					ffile=`readlink -e $firmfile`
				fi
				if [ -e $ffile ]; then
					if [ ! -e $firmpath ]; then
						echo "Firmware: $firmfile"
						if [ ! -d `dirname ${firmpath}` ] ;then
							mkdir -p `dirname ${firmpath}`
						fi
						ln $ffile ${firmpath} #|| return 2
					fi
				else
					echo -e "\tNotice, Firmware $1 not found"
					return 2
				fi
			else
				echo -e "\tNotice, Firmware $1 not found"
				return 2
			fi
		done
	else
		echo -e "\tNotice, Firmware $1 not found"
		return 2
	fi
}

read_conf()
{
if [ -z "$1" ] ;
	then CONF_FILE=$CONFIG_FILE
	else CONF_FILE=$1
fi
(cat $CONF_FILE; echo) | # make sure there is a LF at the end
while read type name args
do
    type=`echo $type | busybox.shared dos2unix | sed -e 's/\&/\\\&/g'`
    name=`echo $name | busybox.shared dos2unix | sed -e 's/\&/\\\&/g'`
    args=`echo $args | busybox.shared dos2unix | sed -e 's/\&/\\\&/g'`
    case $type in
    \#*|"") continue
	    ;;
    param)
	echo "Parameter: $name"
	echo "ts_$name=$args" >> $PACDIR/$name.param
	;;
    package)
	echo "Package: $name"
	if find_package $name ; then
	   echo "cp -a --remove-destination $pkgpath/* ./tmp-tree > /dev/null 2>&1">>\
	     $PACDIR/$name.package
	else
	   echo "Not Found $name!!"
	fi
	;;
    machine)

	echo "Machine: $name"
	if find_package $name machine ; then
	    read_conf $pkgpath/module.list
	    if [ -e $pkgpath/firmware.list ]; then
		read_conf $pkgpath/firmware.list
	    fi
	    if [ -e $pkgpath/param.list ]; then
		read_conf $pkgpath/param.list
	    fi
	    if [ -e $pkgpath/package.list ]; then
		read_conf $pkgpath/package.list
	    fi
	    if [ -e $pkgpath/etc ]; then
		cp -rf $pkgpath/etc ./tmp-tree/.
	    fi
	else
	   echo "Not Found $name!!"
	fi
	;;
    module)
	if ! is_enabled $ALLMODULES; then
		if [ -e ./kernel/alias/$name ] ; then
			name=`cat ./kernel/alias/$name`
		fi
	        if [ -e `find /lib/modules/$KERNVER -name ${name}.ko.xz` ] ; then
			echo "Module $KERNVER: $name"
			copy_module ${name}.ko.xz $KERNVER ./tmp-tree
		else
			echo "Error, Module $name not found"
		fi
	fi
	if [ `make_caps X$args` == "XFORCE" ]; then
		echo $name `echo $args | cut -f1 -d#` >> ./tmp-tree/etc/modules
	fi
	;;
    module_pkg)
	if ! is_enabled $ALLMODULES; then
	        if [ -e ./kernel/alias/$name ] ; then
			name=`cat ./kernel/alias/$name`
		fi
       		if [ -e `find /lib/modules/$KERNVER -name ${name}.ko.xz` ] ; then
			echo "Module Pkg: $name"
			copy_module ${name}.ko.xz $KERNVER $MODDIR/$name
			mkdir -p $MODDIR/$name/etc
		else
			echo "Error, Module $name not found"
		fi
		echo $name $args `echo $args | cut -f1 -d#` > $MODDIR/$name/etc/$name.modules
	fi
	;;
    firmware)
	copy_firmware $name $args
	;;
    pkg)
        echo "building-pkg $name"
	if find_package $name ; then
	    echo -e "cp -a --remove-destination $pkgpath $PKGDIR" >> $PACDIR/$name.pkg
	else
	   echo "Not Found $name!!"
	fi
	;;
    *)
	echo "Unknown config line: $type $name $args"
	;;
    esac
done
}

install_non_distributable()
{
	echo -e "\nAdding and install non-distributable binaries\n"
	for package in `ls $PACDIR | grep -v "\.param"`; do
		package=${package%.package}
		package=${package%.pkg}
		# Check if need to add full locale support for package
		if [ -e $PACDIR/fulllocales.param ]; then
                                . $PACDIR/fulllocales.param
		fi
		if find_package $package && [ ! -e $pkgpath/build/installed ] && [ -e $pkgpath/build/install ] ; then
			if [ -e $PACDIR/"$package"url.param ]; then
				. $PACDIR/"$package"url.param
				URL=`eval echo '$ts_'$package'url'`
				if [ -n "$URL" ] ; then
					web_package $URL $package
				else
					echo "$package url param not set in build.conf"
					echo -e "Build Aborted\n"
					remove_files
					exit 1
				fi
			elif [ "`cat $pkgpath/build/install |grep -c -e repackage`" -gt "0" ]; then
				if $pkgpath/build/install ; then
					touch $pkgpath/build/installed
					echo -e "$package: Setup complete"
				else
					echo -e "\nError has occured while installing package"
					echo -e "Build Aborted\n"
					remove_files
					exit 1
				fi
			fi
		fi
		if find_package $package && [ -e $pkgpath/build/license ] ; then
			if [ "`make_caps $LICENSE`" = "DECLINE" ] ; then
				CHOICE=NO
			elif [ "`make_caps $LICENSE`" != "ACCEPT" ] ; then
				cat $pkgpath/build/license | more
				echo "Do you agree to this notice (YES/NO)"
				read CHOICE
				CHOICE=`make_caps $CHOICE`
			else
				CHOICE=YES
			fi
			if [ "$CHOICE" = "YES" ] ; then
				echo "INFO: $package included"
			else
				if [ -e $PACDIR/$package.package ] ; then
					rm $PACDIR/$package.package
				elif [ -e $PACDIR/$package.pkg ] ; then
					rm $PACDIR/$package.pkg
				fi
				echo "INFO: $package not included"
			fi
		fi
	done
}

pre_copy()
{
	local module=$1
	if grep -qe $module /tmp/blacklist.modules; then
		echo "Skipping $module"
	elif copy_module $module $KERNVER ./tmp-tree; then
		allfirm $module
	fi
}

# Main TS build script
main()
{
echo "+ Building image: "

if [ -e $PKGDIR ] ; then
	rm -Rf $PKGDIR/*
fi

mkdir -p $PKGDIR
unsquashfs -d ./tmp-tree $INITDIR/initrd.devices > /dev/null
mkdir -p ./tmp-tree/lib64/modules
mkdir -p ./tmp-tree/packages
mkdir -p $MODDIR

read_conf ./build.urls
read_conf

if [ -e $PACDIR/earlymicrocode.param ]; then
	. $PACDIR/earlymicrocode.param
fi
if [ -e $PACDIR/allfirmware.param ]; then
	. $PACDIR/allfirmware.param
fi
if [ -e $PACDIR/blockpackage.param ]; then
	. $PACDIR/blockpackage.param
	for package in $ts_blockpackage; do
		echo $package >> /tmp/block.package
	done
else
	touch /tmp/block.package
fi

# Check if kernel exists
if [ ! -e /boot/vmlinuz-$KERNVER ] ; then
	echo -e "\nError Kernel $KERNVER not found!!!"
	remove_files
	exit 0
fi

if is_enabled $ts_earlymicrocode ; then
	echo "Creating Early Microcode!"
	mkdir -p kernel/x86/microcode
	cat /lib64/firmware/intel-ucode/*-*-* > kernel/x86/microcode/GenuineIntel.bin
	cat /lib64/firmware/amd-ucode/microcode_amd*.bin > kernel/x86/microcode/AuthenticAMD.bin
	ls kernel/x86/microcode/* | cpio -o -C 1024 -H newc -R 0:0 > $INITDIR/ucode
	rm -rf kernel/x86
elif is_enabled $ts_allfirmware ; then
	echo "Doing an All Firmware Build!"
	if [ -e /lib64/firmware/amd-ucode ]; then
	    for microcode in `find /lib64/firmware/amd-ucode -type f |cut -d "/" -f4-`; do
		copy_firmware $microcode
	    done
	fi
	if [ -e /lib64/firmware/intel-ucode ]; then
	    for microcode in `find /lib64/firmware/intel-ucode -type f |cut -d "/" -f4-`; do
		copy_firmware $microcode
	    done
	fi
fi

mkdir -p ./tmp-tree/lib64/modules/$KERNVER
copy_module modules.builtin $KERNVER ./tmp-tree
copy_module modules.order $KERNVER ./tmp-tree
if [ -e ./ALLMODULES ]; then
	ALLMODULES=true
fi
if is_enabled $ALLMODULES ; then
	echo "Doing an All Modules Build!"
	if [ -e $PACDIR/blacklist.param ]; then
                . $PACDIR/blacklist.param
	fi
	if [ -e $PACDIR/blacklist_grp.param ]; then
		. $PACDIR/blacklist_grp.param
	fi
	touch /tmp/blacklist.modules
	for module in $ts_blacklist; do
		echo $module >> /tmp/blacklist.modules
	done
	for group in $ts_blacklist_grp; do
		for gdir in `find /lib/modules/$KERNVER -type d -name $group`; do
			find $gdir -name \*.ko.xz -printf '%f ' >> /tmp/blacklist.modules
		done
	done
	if is_enabled $ts_singlethread; then
		procs=1
	else
		procs=`nproc`
		let procs=(procs * 8 )
	fi
	export -f pre_copy copy_module allfirm make_caps copy_firmware
	export ts_allfirmware KERNVER
	find /lib/modules/$KERNVER -name \*.ko.xz -printf '%f\n' | \
	xargs -P $procs -I {} bash -c 'pre_copy "$@"' _ {}
	rm /tmp/blacklist.modules
fi

touch /tmp/dirty
while [ -e /tmp/dirty ]; do
	rm /tmp/dirty
	if ! is_enabled $ALLMODULES || [ -n "$ts_blacklist_grp" ]; then
		# Adding dependent modules via modinfo
		echo -e "\nBuilding dependencies for $KERNVER Modules..."
		module_dependencies
	fi

	# Adding additional packages and modules which are dependencies of modules
	module_package_dependencies

	# Adding dependent packages
	echo -e "\nAdding Package Dependencies"

	package_dependencies package
	package_dependencies pkg

	# Adding modules that are dependencies of packages
	package_module_dependencies

	# Did we add anything?
	if [ -e /tmp/dirty ]; then
		echo -e "\nDependencies are dirty. Restarting!"
	fi
done
echo -e "\nDependencies are clean!"
#Run depmod on modules included to generate modules.* files
depmod -b ./tmp-tree $KERNVER 2>/dev/null

# Now that all the package deps are satisfied, do we really need a splash
if [ -e $PACDIR/bootlogo.param ]; then
        . $PACDIR/bootlogo.param
fi
if ! is_enabled $ts_bootlogo; then
	echo -e "Boot Logo Disabled. Removing splash package."
	rm -f $PACDIR/plymouth.package
fi

install_non_distributable

# Add all packages to filetree
echo -e "\nAdding Packages to Filetree\n"
ls $PACDIR/* > ./filelist
for filename in `cat ./filelist | grep "\.package"` ; do
	. $filename
done
for filename in `cat ./filelist | grep "\.pkg"` ; do
	. $filename
done
for filename in `cat ./filelist | grep "\.param"` ; do
	. $filename
done
rm ./filelist
# Set Additional Params

if [ -e $PACDIR/tsuser.param ]; then
	if [  -e $PACDIR/tsuserpasswd.param ]; then
		if [ "$ts_tsuserpasswd" == "!!" ]; then
			GETPASSWD="!!"
		elif is_enabled $ts_sha512passwd; then
			GETPASSWD=`mkpasswd -m sha512crypt $ts_tsuserpasswd`
		else
			GETPASSWD=`mkpasswd -m md5 $ts_tsuserpasswd 2>/dev/null || mkpasswd -m sha512crypt $ts_tsuserpasswd`
		fi
	fi
	# Create the entries as tsuser, they will be replaced later
	echo "tsuser:$GETPASSWD:1000:1000:tsuser:/home/tsuser:/bin/sh" >> ./tmp-tree/etc/passwd
	echo "tsuser:x:1000:tsuser" >> ./tmp-tree/etc/group
else
	# Still create the tsuser, but we will delete later after other automation runs.
	echo "tsuser:!!:1000:1000:tsuser:/home/tsuser:deleteme" >> ./tmp-tree/etc/passwd
	echo "tsuser:x:1000:deleteme" >> ./tmp-tree/etc/group
	ts_tsuser=root
fi
echo "TSUSER=$ts_tsuser" >> ./tmp-tree/etc/thinstation.env

echo -e "Setting Passwords"

if [  -e $PACDIR/tsadminpasswd.param ]; then
    if [ "$ts_tsadminpasswd" == "!!" ]; then
        GETPASSWD="!!"
    elif is_enabled $ts_sha512passwd; then
        GETPASSWD=`mkpasswd -m sha512crypt $ts_tsadminpasswd`
    else
        GETPASSWD=`mkpasswd -m md5 $ts_tsadminpasswd 2>/dev/null || mkpasswd -m sha512crypt $ts_tsadminpasswd`
    fi
#    cp ./tmp-tree/etc/passwd ./tmp-tree/etc/passwd.tmp
    echo "tsadmin:$GETPASSWD:42:42:tsadmin:/home/tsadmin:/bin/sh" >>./tmp-tree/etc/passwd
#    cat ./tmp-tree/etc/passwd.tmp | grep -v "tsadmin" >> ./tmp-tree/etc/passwd
#    rm ./tmp-tree/etc/passwd.tmp
    echo "tsadmin:x:42:tsadmin" >> ./tmp-tree/etc/group
fi

if [  -e $PACDIR/rootpasswd.param ]; then
    if [ "$ts_rootpasswd" == "!!" ]; then
        GETPASSWD="!!"
    elif is_enabled $ts_sha512passwd; then
        GETPASSWD=`mkpasswd -m sha512crypt $ts_rootpasswd`
    else
        GETPASSWD=`mkpasswd -m md5 $ts_rootpasswd 2>/dev/null || mkpasswd -m sha512crypt $ts_rootpasswd`
    fi
#    cp ./tmp-tree/etc/passwd ./tmp-tree/etc/passwd.tmp
    echo "root:$GETPASSWD:0:0:root:/root:/bin/sh" >>./tmp-tree/etc/passwd
    echo "root:x:0:root" >> ./tmp-tree/etc/group
#    cat ./tmp-tree/etc/passwd.tmp | grep -v "root" >> ./tmp-tree/etc/passwd
#    rm ./tmp-tree/etc/passwd.tmp
fi

if [ -e $PACDIR/xorgvncpasswd.param ]; then
    echo $ts_xorgvncpasswd |vncpasswd -f >./tmp-tree/etc/.vncpasswd
fi

if [ -e $PACDIR/storagepasswd.param ]; then
    echo $ts_storagepasswd > ./tmp-tree/etc/.storage
    chmod 400 ./tmp-tree/etc/.storage
fi

if [ -e $PACDIR/dialuppasswd.param ]; then
    echo "DIALUP_PASSWORD=$ts_dialuppasswd" >> ./tmp-tree/etc/thinstation.defaults
fi


if [ -e $PACDIR/sambapasswd.param ] && [ -e $PACDIR/samba-base.* ] ; then
    echo $ts_sambapasswd > $TOOLSDIR/smbpass
    echo $ts_sambapasswd >> $TOOLSDIR/smbpass
    smbpasswd -L -c $TOOLSDIR/smb.conf -a -U root -s < $TOOLSDIR/smbpass > /dev/null 2>&1
    mv $TOOLSDIR/passdb.tdb ./tmp-tree/etc/samba/private/passdb.tdb
    mv $TOOLSDIR/secrets.tdb ./tmp-tree/etc/samba/private/secrets.tdb
    rm -f $TOOLSDIR/{smbpass,gencache_notrans.tdb,mutex.tdb}
fi


echo -e "Setting basepath"

if [ -e $PACDIR/basename.param ]; then
  if [ -e $PACDIR/basename.param ]; then
    echo "BASENAME=\"$ts_basename\"" >> ./tmp-tree/etc/thinstation.defaults
  elif [ "$ts_basename" = "." ] ; then
    echo "BASENAME=" >> ./tmp-tree/etc/thinstation.defaults
  fi
else
    echo "BASENAME=thinstation" >> ./tmp-tree/etc/thinstation.defaults
fi

if [ -e $PACDIR/basepath.param ]; then
    echo "BASEPATH=\"$ts_basepath\"" >> ./tmp-tree/etc/thinstation.defaults
else
    echo "BASEPATH=." >> ./tmp-tree/etc/thinstation.defaults
fi

if [ -e $PACDIR/bootfssize.param ]; then
    echo "BOOTFSSIZE=$ts_bootfssize" >> ./tmp-tree/etc/thinstation.defaults
fi 

echo -e "Setting baseurl"

if [ -e $PACDIR/baseurl.param ]; then
    echo "BASEURL=\"$ts_baseurl\"" >> ./tmp-tree/etc/thinstation.defaults
fi

echo -e "Checking for Key File"

if [ -e $PACDIR/keyfile.param ]; then
	if [ -e "$ts_keyfile" ] ; then
		if [ ! -e ./tmp-tree/etc/skel/.ssh ] ; then
			mkdir -p ./tmp-tree/etc/skel/.ssh
		fi
		cp $ts_keyfile ./tmp-tree/etc/skel/.ssh
	else
		echo "Key file not found, build aborted."
		remove_files
       		exit 1
	fi
fi

echo -e "Checking for Desktop background"

if [ -e $PACDIR/desktop.param ]; then
    echo -e "Using $ts_desktop as desktop background"
    if [ "`basename $ts_desktop |cut -d. -f2`" == "svg" ]; then
	get_file $ts_desktop ./tmp-tree/etc background.svg
    else
	get_file $ts_desktop ./tmp-tree/etc background.jpg
    fi
fi

echo -e "Checking for Known Hosts File"

if [ -e $PACDIR/knownhosts.param ]; then
	if [ -e "$ts_knownhosts" ] ; then
		if [ ! -e ./tmp-tree/etc/skel/.ssh ] ; then
			mkdir -p ./tmp-tree/etc/skel/.ssh
		fi
		cp $ts_knownhosts ./tmp-tree/etc/skel/.ssh
		echo "" >> ./tmp-tree/etc/skel/.ssh/`basename $ts_knownhosts`
	else
		echo "Known Hosts file not found, build aborted."
		remove_files
       		exit 1
	fi
fi

echo -e "Checking for ICA encryption support"

if [ -e $PACDIR/icaencryption.param ]; then
    if [ "`make_caps $ts_icaencryption`" != "TRUE" ] ; then
	    if [ -e $PACDIR/ica.package ] ; then 
		    rm ./tmp-tree/usr/lib64/ICAClient/libctxssl.so
	    elif [ -e $PACDIR/ica.pkg ] ; then
		    rm $PKGDIR/ica/usr/lib64/ICAClient/libctxssl.so
	    fi
    fi
fi

echo -e "Checking for Debug Verbosity"

if [ -e $PACDIR/bootverbosity.param ]; then
	echo "DEBUGLEVEL=$ts_bootverbosity" > ./tmp-tree/etc/DEBUGLEVEL
fi

get_debug_level $ts_bootverbosity

echo -e "Checking for Halt on Error Override"

if [ -e $PACDIR/haltonerror.param ]; then
	echo "HALTONERROR=$ts_haltonerror" >> ./tmp-tree/etc/thinstation.defaults
else
	echo "HALTONERROR=true" >> ./tmp-tree/etc/thinstation.defaults
fi

if [ -z "$DEBUG_KERNEL" ] ; then
  	DEBUGCONSOLE="console=tty1"
fi

# Should we delete the dri folder?
mesa

# Process locales
locales

# Building Sample Thinstation.conf file
sample_configuration

# Process keymaps
keymaps

# Clean up unncessary folders
#rm -rf ./tmp-tree/{dependencies,build,.dna,.wind,.unwind}
#set +x
# Adding library dependencies

lib_dependencies

# Add user defined defaults
if [ -e ./$ts_defaultconfig ] && [ ! -z "$ts_defaultconfig" ] ; then
	cat ./$ts_defaultconfig | grep -v "^#" | sed '/^[ \t]*$/d' >> ./tmp-tree/etc/thinstation.defaults
	busybox.shared dos2unix ./tmp-tree/etc/thinstation.defaults
	source ./tmp-tree/etc/thinstation.defaults
fi

# Set up zoneinfo file
if [ "$TIME_ZONE" == "" ]; then
	TIME_ZONE=UTC
fi
echo -e "\nSetting Zone Info File to $TIME_ZONE"
tzpath=./tmp-tree/lib64/zoneinfo/$TIME_ZONE
if [ ! -d ${tzpath%/*} ]; then
	mkdir -p ${tzpath%/*}
fi
if [ ! -e $tzpath ]; then
	ln /usr/share/zoneinfo/$TIME_ZONE ${tzpath%/*}/
fi
ln -sf /usr/share/zoneinfo/$TIME_ZONE ./tmp-tree/etc/localtime

# Copy across sample file for www administration interface
if [ -e $PACDIR/www.* ]; then
  WEBDIR=./tmp-tree/lib64/www/html/admin/config
	if [ ! -d $WEBDIR ] ; then 
		mkdir -p $WEBDIR
	fi
  cat -v ./thinstation.conf.sample | \
	grep "\-\-\-" | \
	cut -d" " -f3- | \
	sed -e s/Options//g  | \
	busybox.shared dos2unix | \
  	while read heading; do
		awk "/--- $heading/,/##/" ./thinstation.conf.sample  > "$WEBDIR/$heading.sample"
	done
fi


# Check for ACPI Support
if [ "$ts_acpisupport" == "disable" ]; then
	echo -e "\nAdvanced Configuration and Power Interface support disabled\n"
	kernel_acpi_support=false
else
	echo -e "\nAdvanced Configuration and Power Interface support enabled\n"
fi


for package in `ls $PACDIR | grep "\.package" | sed -e "s/\.package//"`
do
  if find_package $package && [ -e "$pkgpath/build/finalize" ]; then
    mkdir -p ./tmp-tree/finalize
    cp $pkgpath/build/finalize ./tmp-tree/finalize/`head -n 1 $pkgpath/build/finalize | cut -d' ' -f 2`$package
  fi
  if find_package $package && [ -e "$pkgpath/build/pip2.freeze" ]; then
    cat $pkgpath/build/pip2.freeze >> ./tmp-tree/pip2.freeze
  fi
  if find_package $package && [ -e "$pkgpath/build/pip3.freeze" ]; then
    cat $pkgpath/build/pip3.freeze >> ./tmp-tree/pip3.freeze
  fi
  if find_package $package && [ -e "$pkgpath/build/image" ]; then
    cat $pkgpath/build/image >> build.image
  fi
done

# Adding contributed modifications
echo -e "\nAdding contributed files\n"

for filename in `find $PKGDIR -maxdepth 1 -name "*" && echo "./tmp-tree"`
do
	if [ -e $filename/build/contribs ] ; then
		for contrib in `find $filename/build/contribs -type f -name "*"`
		do
			contribname=`basename $contrib`
			destdir=`dirname $contrib | sed -e "s/\/build\/contribs//g"`
			basedir=`dirname $contrib | sed -e "s/.*contribs//g"`
			# Either appends it with cat or copies it in, pretty basic at 
			# present, could be expanded later
			if [ -e $destdir/$contribname ] ; then
				echo "Appending contributed $contribname to $filename"
				cat $contrib >> $destdir/$contribname
			elif [ -e ./tmp-tree/$basedir/$contribname ] ; then
				echo "Appending contributed $contribname to tmp-tree"
				cat $contrib >> ./tmp-tree/$basedir/$contribname
			else
				echo "File not found, build aborted."
			  	remove_files
       			   	exit 1 
			fi
		done
		rm -R $filename/build/contribs
	fi
done

# Clean up unncessary folders
rm -Rf $PACDIR
rm -Rf ./tmp-tree/conf

# Building PKG packages
echo -e "\nBuilding PKG Packages\n"

for filename in `ls -1 $PKGDIR/` ; do
	cd $PKGDIR/$filename
	if [ -e build ] ; then
		rm -Rf build
	fi
	echo "Building $filename.pkg"
	tar -cz * > ../$filename.pkg
	cd ../../..
	rm -Rf $PKGDIR/$filename
	if [ -n "$PKGFILES" ] ; then
		PKGFILES="$PKGFILES $filename"
	else
		PKGFILES="$filename"
	fi
done

# Building Module packages
echo -e "\nBuilding Module PKG Packages\n"

for filename in `ls -1 $MODDIR/` ; do
	cd $MODDIR/$filename
	echo "Building $filename.mpkg"
	tar -cz * > ../$filename.mpkg
	cd ../../..
	rm -Rf $MODDIR/$filename
	mv $MODDIR/$filename.mpkg $PKGDIR
	if [ -n "$MODFILES" ] ; then
		MODFILES="$MODFILES $filename"
	else
		MODFILES="$filename"
	fi
done

rmdir $MODDIR

filesystem_fixups
}

mesa()
{
	if is_disabled $ts_mesa_3d; then
		echo -e "Mesa 3D disabled, deleting the dri folder."
		rm -rf ./tmp-tree/lib64/dri
		rm -rf ./tmp-tree/lib64/gallium-pipe
		rm -rf ./tmp-tree/lib64/vdpau
		rm -f ./tmp-tree/lib64/xorg/modules/extensions/libglx.so
	fi
}

filesystem_fixups()
{
	# Install Python Packages
	if [ -e ./tmp-tree/pip2.freeze ]; then
		echo -e "Installing Python2 Packages"
		mkdir ./py-tmp
		pip2 install -r ./tmp-tree/pip2.freeze -I --root ./py-tmp --prefix=/usr
		cp -a ./py-tmp/usr/* ./tmp-tree/.
		rm -rf ./py-tmp
		rm ./tmp-tree/pip2.freeze
	fi
	if [ -e ./tmp-tree/pip3.freeze ]; then
		echo -e "Installing Python3 Packages"
		mkdir py-tmp
		pip3 install -r ./tmp-tree/pip3.freeze -I --root ./py-tmp --prefix=/usr --no-warn-script-location --root-user-action=ignore --disable-pip-version-check
		mkdir -p ./py-tmp/lib64
		if [ -e ./py-tmp/usr/lib ]; then
			cp -a ./py-tmp/usr/lib/* ./py-tmp/lib64/.
			rm -rf ./py-tmp/usr/lib
		fi
                if [ -e ./py-tmp/usr/lib64 ]; then
                        cp -a ./py-tmp/usr/lib64/* ./py-tmp/lib64/.
                        rm -rf ./py-tmp/usr/lib64
                fi
		if [ -e ./py-tmp/usr/share ]; then
			cp -a ./py-tmp/usr/share/* ./py-tmp/lib64/.
			rm -rf ./py-tmp/usr/share
		fi
		cp -a ./py-tmp/usr/* ./py-tmp/.
		rm -rf ./py-tmp/usr
		cp -a ./py-tmp/* ./tmp-tree/.
		rm -rf ./py-tmp
		rm ./tmp-tree/pip3.freeze
	fi

	# Various filesystem fixups
	echo -e "Running File System Fixups"
	if [ -z "$ts_cdvolname" ]; then
		ts_cdvolname=ThinStation
	fi
	echo "CDVOLNAME=$ts_cdvolname" >> ./tmp-tree/etc/thinstation.env
	echo "TS_VERSION=$TSVER" >> ./tmp-tree/etc/thinstation.env
	if [ -e ./tmp-tree/etc/icewm/toolbar ]; then
		echo -e "\tFixing IceWM toolbar"
		sed -i "s/\$XTERM_CMD/$XTERM_CMD/g" ./tmp-tree/etc/icewm/toolbar
		sed -i "s/\$XTERM_CMD/$XTERM_CMD/g" ./tmp-tree/etc/icewm/keys
	fi
	if [ -e ./tmp-tree/lib64/gconv ] ; then
		echo -e "\tBuilding Charmap Cache"
		for i in `ls ./tmp-tree/lib64/gconv --color=never |cut -d . -f1`; do
			cat /usr/lib64/gconv/gconv-modules|grep -e "$i" >>./tmp-tree/lib64/gconv/gconv-modules
		done
        cp -H `which iconvconfig` ./tmp-tree/bin/.
        chroot ./tmp-tree /bin/iconvconfig
        rm ./tmp-tree/bin/iconvconfig
        fi
	echo -e "\tRemoving Extra Files"
	find ./tmp-tree -name .gitignore -delete
#	if [ ! -e ./tmp-tree/etc/init.d/audio ]; then
#		for sound in `find ./tmp-tree/lib/modules -type d -name sound`; do
#			rm -rf $sound
#		done
#	fi
#	if [ -z "`find ./tmp-tree/lib/modules -name udf.ko.xz -o -name isofs.ko.xz`" ]; then
#		for cdrom in `find ./tmp-tree/lib/modules -type d -name cdrom`; do
#			rm -rf $cdrom
#		done
#	fi
#	for KERNVER in $KERNVERS; do
#		if [ ! -e ./tmp-tree/lib/modules/$KERNVER/kernel/fs ]; then
#			for driver in `find ./tmp-tree/lib/modules/$KERNVER -type d -name scsi -o -name ata -o -name fusion`; do
#				rm -rf $driver
#			done
#		fi
#	done
	if [ ! -e ./tmp-tree/etc/xserverrc ] ;then
		echo -e "\tRemoving Extra Font Files"
		rm -rf ./tmp-tree/lib64/X11/fonts
		rm -rf ./tmp-tree/lib64/X11
		rm -rf ./tmp-tree/lib64/keymaps
		rm -f ./tmp-tree/etc/background.jpg
	else
		echo -e "\tRunning mkfontdir and mkfontscale"
		for fontdir in `find ./tmp-tree/lib64/X11/fonts -mindepth 1 -type d`; do
			if [ ! -e $fontdir/fonts.scale ]; then
				mkfontscale $fontdir
			fi
			mkfontdir $fontdir
		done
		if [ -e ./tmp-tree/lib64/gdk-pixbuf-2.0/2.10.0/loaders ] ; then
			echo -e "\tCaching pixbuf loaders"
			for loader in `find ./tmp-tree/lib64/gdk-pixbuf-2.0/ -type f -printf "%f "`; do
				loader=`find /usr/lib64/gdk-pixbuf-2.0/ -name $loader`
				lver=`echo $loader |cut -d "/" -f5`
				gdk-pixbuf-query-loaders-64 $loader | \
					grep -v "#" \
					>>./tmp-tree/lib64/gdk-pixbuf-2.0/$lver/loaders.cache
			done
		fi
#		if [ -d ./tmp-tree/lib/pango ] ;then
#			echo -e "\tCaching pango modules"
#			for module in `find ./tmp-tree/lib/pango -type f -printf "%f "`; do
#				module=`find /usr/lib/pango -name $module`
#				pver=`echo $module |cut -d "/" -f5`
#				pango-querymodules $module | \
#					grep -v "#" \
#					>> ./tmp-tree/lib/pango/$pver/modules.cache
#			done
#		fi
		if [ -d ./tmp-tree/lib64/gtk-2.0 ]; then
			echo -e "\tCaching gtk-2.0 immodules"
			for immodule in `find ./tmp-tree/lib64/gtk-2.0/2.10.0/immodules -type f -printf "%f "`; do
				immodule=`find /usr/lib64/gtk-2.0/2.10.0/immodules -name $immodule`
				gtk-query-immodules-2.0-64 $immodule | \
					grep -v "#" \
					>> ./tmp-tree/lib64/gtk-2.0/2.10.0/immodules.cache
			done
		fi
                if [ -d ./tmp-tree/lib64/gtk-3.0 ]; then
                        echo -e "\tCaching gtk-3.0 immodules"
                        for immodule in `find ./tmp-tree/lib64/gtk-3.0/3.0.0/immodules -type f -printf "%f "`; do
                                immodule=`find /usr/lib64/gtk-3.0/3.0.0/immodules -name $immodule`
                                gtk-query-immodules-3.0-64 $immodule | \
                                        grep -v "#" \
                                        >> ./tmp-tree/lib64/gtk-3.0/3.0.0/immodules.cache
                        done
                fi
		if [ -e ./tmp-tree/lib64/glib-2.0/schemas ]; then
			echo -e "\tCompiling Schemas"
			cp -H `which glib-compile-schemas` ./tmp-tree/bin/.
			chroot ./tmp-tree /bin/glib-compile-schemas /lib64/glib-2.0/schemas 2>/dev/null
#			rm ./tmp-tree/bin/glib-compile-schemas
			gio-querymodules-64 ./tmp-tree/lib64/gio/modules
		fi
	fi
	echo -e "\tLinking BusyBox\n"
	chroot ./tmp-tree /sbin/busybox.shared --install -s

	if [ -e ./tmp-tree/lib64/libcrypto.so.1.1 ]; then
		cp /usr/lib64/.libcrypto.so.1.1.hmac ./tmp-tree/lib64
	fi
	if [ -e ./tmp-tree/lib64/libssl.so.1.1 ]; then
		cp /usr/lib64/.libssl.so.1.1.hmac ./tmp-tree/lib64
	fi
        if echo "$ts_kernelcmdline" |grep -q -e 'fips=1'; then
                touch tmp-tree/FIPS
        fi
	if [ -e ./tmp-tree/finalize ]; then
		echo -e "\tRunning Finalize\n"
		mount --bind /dev ./tmp-tree/dev
		mount --bind /proc ./tmp-tree/proc
		sed -e "/if.*proc\/cmdline/d" tmp-tree/etc/thinstation.global > ./tmp-tree/build.finalize
		cat ./tmp-tree/finalize/* >> ./tmp-tree/build.finalize
		cp /etc/passwd ./tmp-tree/build/.
		cp /etc/group ./tmp-tree/build/.
		chroot ./tmp-tree /bin/bash /build.finalize
		while fuser ./tmp-tree 2>&1 > /dev/null; do
			sleep .1
		done
		unmount_tmp
		rm ./tmp-tree/build.finalize
		rm -rf ./tmp-tree/finalize
		rm -rf ./tmp-tree/tmp/*
		# Possibly compress modules and run depmod one last time, in case a finalize script removed a module
		if [ -n "$ts_modcmd" ]; then
			# Maybe "gzip -n -f" or "xz -f"
			echo -e "\tCompressing Modules"
			export -f compress_module
			export ts_modcmd
			find ./tmp-tree/lib64/modules -name \*.ko.xz | \
			 xargs -P $procs -I {} bash -c 'compress_module "$@"' _ {}
		fi
		depmod -b ./tmp-tree $KERNVER 2>/dev/null
	fi
	# Clean up unncessary folders
	rm -rf ./tmp-tree/{dependencies,build,.dna,.wind,.unwind}

	# Sort the auth files
	pwck -s -R /build/tmp-tree
	grpck -s -R /build/tmp-tree
}

compress_module()
{
	$ts_modcmd $1
}


# this is the starting point =>
remove_files
rm -rf boot-images/initrd/{kernel_parameters,initrd,ucode,image.md5,lib.squash,vmlinuz*}

# Check OS for required commands. If some are missing the build system may fail silently.
echo -n "Checking for required commands... "

required_commands="awk basename cat chmod comm cp cut diff dirname du echo file find ldd ln ls mkdir mv rm rmdir sed sleep sort tar touch"

# Check for sed first
sed --version >/dev/null
if [ $? -eq 127 ]; then
	echo "FAIL"
	echo "Your system does not have the 'sed' command"
	echo "This build system requires it; aborting build"
	exit 1
fi

missing_commands=""
for command in $required_commands; do
	found=0
	for x in `echo $PATH|sed "s/:/ /g"`; do
		if [ -x $x/$command ]; then
			found=1
		fi
	done
	if [ $found -eq 0 ]; then
		missing_commands="$missing_commands $command"
	fi
done

if [ -n "$missing_commands" ]; then
	echo "FAIL"
	echo "You are missing the following UNIX commands:$missing_commands"
	echo "This build system requires them; aborting build"
	exit 1
fi

required_tools="mkisofs mksquashfs unsquashfs glib-compile-schemas rsvg-convert convert vncpasswd smbpasswd"
for tool in $required_tools; do
	if [ ! `which $tool` ]; then
		missing_tools="$missing_tools $tool"
	fi
done

if [ -n "$missing_tools" ]; then
	echo "FAIL"
	echo "Your Thinstation installation is broken; the following needed tools"
	echo "are missing:$missing_tools"
	echo "This build system requires them; aborting build"
	echo "Are you inside the chroot environment?"
	exit 1
fi
echo "OK"

# Get positional parameters
until [ -z "$1" ]; do
	if [ "$1" = "--kernel" ]; then
		shift
		KERNVEROPT="$KERNVEROPT $1"
	elif [ "$1" = "--license" ]; then
		shift
		LICENSE=$1
	elif [ "$1" = "--buildtime" ]; then
		shift
		BUILDTIME=$1
	elif [ "$1" = "--noimages" ]; then
		NOIMAGES=true
	elif [ "$1" = "--help" ]; then
		showhelp
		remove_files
		exit 0
	elif [ "$1" = "--allmodules" ]; then
		ALLMODULES=true
	elif [ "$1" = "--autodl" ]; then
		AUTODL=true
		export AUTODL
	elif [ "$1" = "--removeall" ]; then
		REMOVEALL=true
	elif [ "$1" = "--regenconf" ]; then
		REGENCONF=true
	elif [ "$1" = "--savedir" ]; then
		SAVEDIR=true
		export SAVEDIR
	elif [ "$1" = "--savepkglist" ]; then
		SAVEPKGLIST=true
		export SAVEPKGLIST
 	elif [ "$1" = "--update" ]; then
 		UPDATE=true
	else
		CONFIG_FILE=$1
	fi
	shift
done

if [ -n "$CONFIG_FILE" ]; then
	if [ ! -e $CONFIG_FILE ] ; then
		echo "$CONFIG_FILE doesn't exist, ERROR!!"
		remove_files
		exit 1
	fi
else
	CONFIG_FILE="build.conf"
fi

KERNVER=`ls --color=never /lib/modules |sort -V|tail -n1`
echo -e "Using the $KERNVER Kernel"

# Removal all commerical packages then exit
if [ -n "$REMOVEALL" ]; then
	remove_files
	remove_old_boot_files
	for pkgroot in $TSWRKNG $XTRWRKNG; do
	for package in `ls $pkgroot/packages`;	do
		if [ -e $pkgroot/packages/$package/build/remove ] && [ -e $pkgroot/packages/$package/build/installed ] ; then
			$pkgroot/packages/$package/build/remove
		fi
	done
	done
	echo "All commerical binaries removed, quitting."
	exit 0
fi

# Copy all config files in conf directory
if [ -n "$REGENCONF" ] ; then
	rm ./conf/*.conf.sample > /dev/null 2>&1 
	for filename in `ls ./packages`; do
		if [ -e ./packages/$filename/build/conf ] ;then
			for confname in `ls ./packages/$filename/build/conf/*`;	do
				name=`basename $confname | cut -c3-`
				cp $confname ./conf/$name.conf.sample
			done
		fi
	done
	exit 0
fi

# Run update for all packages with update script
if [ -n "$UPDATE" ]; then
	for pkgroot in $TSWRKNG $XTRWRKNG; do
	for package in `ls $pkgroot/packages`;	do
		echo $package
		update $package
	done
	done
	echo "All packages updated."
fi

# Build Image unless adding a buildtime file, for TS-O-Matic
if [ -z "$BUILDTIME" ]; then
	main
	splash_setup
	strip_files
	make_initrd
else
	if [ -e "$BUILDTIME" ]; then
		ts_initrdcmd=`grep build.conf -e initrdcmd |cut -d '"' -f2`
		ts_bootimages=`grep build.conf -e bootimages |cut -d '"' -f2`
		ts_squashopt=`grep build.conf -e squashopt |cut -d '"' -f2`
		unzip=`echo $ts_initrdcmd |cut -d " " -f1`
		mkdir ./tmp-tree
		cd ./tmp-tree
		if [ "$unzip" != "squashfs" ]; then
			if [ "$unzip" == "none" -o "$unzip" == "" ] ;
				then cat ../$INITDIR/initrd |cpio -i
			else
				$unzip -dc < ../$INITDIR/initrd |cpio -i
			fi
		fi
		cat ../"$BUILDTIME" >> ../tmp-tree/thinstation.buildtime
		busybox.shared dos2unix ../tmp-tree/thinstation.buildtime
		. ../$INITDIR/kernel_parameters
		if [ "$ts_initrdcmd" == "squashfs" ]; then
		    mksquashfs . ../$INITDIR/initrd $ts_squashopt $DEF_SQUASHOPT
		elif [ "$ts_initrdcmd" == "none" -o "$ts_initrdcmd" == "" ]; then
			find . -print0 | cpio --null -oV --format=newc > ../$INITDIR/initrd
		else
			find . -print0 | cpio --null -oV --format=newc | $ts_initrdcmd > ../$INITDIR/initrd
		fi
		cd ..
		chmod 755 $INITDIR/initrd
	else
		echo -e "\nError, no buidtime file found, aborting build"
		remove_files
		exit 1
	fi
fi

# Add extra kernel commandline parameters
if [ -n "$ts_kernelcmdline" ]; then
	KERNEL_PARAMETERS="$KERNEL_PARAMETERS $ts_kernelcmdline"
fi

if [ "$ts_initrdcmd" == "squashfs" ]; then
	if is_enabled $ts_earlymicrocode; then
		blocks=`cat $INITDIR/ucode | cpio -t -C 1024 2>&1 | grep blocks | cut -d' ' -f 1`
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS load_ramdisk=1 ramdisk_start=$blocks ramdisk_blocksize=4096 root=\/dev\/ram0 ramdisk_size=$MAXIMAGE"
		unset blocks
	else
		KERNEL_PARAMETERS="$KERNEL_PARAMETERS load_ramdisk=1 ramdisk_blocksize=4096 root=\/dev\/ram0 ramdisk_size=$MAXIMAGE"
	fi
fi

if [ -z "$kernel_parameters" ]; then
	KERNEL_PARAMETERS="$KERNEL_PARAMETERS $DEBUGCONSOLE"
 	echo "kernel_parameters=\"$KERNEL_PARAMETERS\"" > $INITDIR/kernel_parameters
else
	KERNEL_PARAMETERS="$kernel_parameters"
fi

# Add acpi support to kernel
if [ -n "$kernel_acpi_support" ]; then
	KERNEL_PARAMETERS="$KERNEL_PARAMETERS acpi=off"
fi

# Making all image types
cd boot-images/initrd
rm -f vmlinuz*
md5sum initrd > image.md5
if is_enabled $ts_earlymicrocode; then
	md5sum ucode >> image.md5
fi

ln /boot/vmlinuz-$KERNVER ./vmlinuz$k
md5sum vmlinuz$k >> image.md5

if [ -e lib.squash ]; then
	md5sum lib.squash >> image.md5
fi
cd ../..

image_fastboot()
{
	if [ "$ts_fastboot" == "true" ] || [ "$ts_fastboot" == "lotsofmem" ] ; then
		cp -p $INITDIR/lib.squash $ESP
	elif [ -e $ESP/lib.squash ]; then
		rm $ESP/lib.squash
	fi
}

if [ "$ts_bootimages" != "grub" ] && [ -n "$ts_bootimages" ] ; then
	echo "Use of bootimages is deprecated. Only grub is supported."
fi
ts_bootimages="grub"
if [ -z "$ts_grubtheme" ]; then
	ts_grubtheme="default"
fi

rm -rf boot-images/common
if [ -e build.image ]; then
	sh build.image boot-images/common
	rm build.image
fi

add_image()
{
	for kernel in `find $INITDIR -maxdepth 1 -type f -name vmlinuz\* -printf '%f '`; do
		sys_copy $INITDIR/$kernel $ESP/boot/$kernel
		if [ -e $INITDIR/lib.squash ]; then
			sys_link hard $INITDIR/lib.squash $ESP/boot/lib.squash
		fi
	done

	sys_link hard $INITDIR/initrd $ESP/boot/initrd
	sys_link hard $INITDIR/image.md5 $ESP/boot/image.md5
	echo "machine_id=`dbus-uuidgen`" > $ESP/boot/machine-id
	echo $ESP/boot/machine-id >> boot-images/initrd/added.files
	if is_enabled $ts_earlymicrocode; then
		sys_link hard $INITDIR/ucode $ESP/boot/ucode
	fi
}

add_overlay()
{
	if [ -n "$ts_bootoverlay" ]; then
		OVERLAYDIR="boot-images/$ts_bootoverlay/"
		find $OVERLAYDIR -type f |sed "s|$OVERLAYDIR||g"|while read file; do
			sys_link hard "$OVERLAYDIR/$file" "$ESP/$file"
		done
	fi
}

rufus_copy_files()
{
	rufus_exe=`find /usr/share/rufus -type f 2>/dev/null`
        sys_copy $rufus_exe $ESP/rufus/`basename $rufus_exe`
}

sys_link()
{
	if [ ! -e "$3" ]; then
		mkdir -p `dirname "$3"`
		case "$1" in
			soft) ln -sf "$2" "$3" ;;
			hard) ln "$2" "$3" ;;
		esac
		echo "$3" >> boot-images/initrd/added.files
	fi
}

sys_copy()
{
	if [ ! -e "$2" ]; then
		mkdir -p `dirname "$2"`
		cp -a "$1" "$2"
		if [ "$?" == "0" ]; then
			echo "$2" |sed -E "s|/+|/|g" |sed '/\.tpl/d' >> boot-images/initrd/added.files
		else
			echo "Could not copy $1 to $2"
		fi
	fi
}

wrap_efi()
{
	if is_enabled ${ts_wrap_efi:=enabled}; then
		sys_copy /boot/efi/EFI/fedora/shimx64.efi $ESP/EFI/BOOT/BOOTX64.EFI
		sys_copy /boot/efi/EFI/fedora/shimx64.efi $ESP/EFI/Microsoft/Boot/bootmgfw.efi
		sys_copy /boot/efi/EFI/fedora/mmx64.efi $ESP/EFI/BOOT/mmx64.efi
		sys_copy /boot/efi/EFI/fedora/mmx64.efi $ESP/EFI/Microsoft/Boot/mmx64.efi
		sys_copy /boot/efi/EFI/fedora/BOOTX64.CSV $ESP/EFI/BOOT/BOOTX64.CSV
		sys_copy /boot/efi/EFI/fedora/BOOTX64.CSV $ESP/EFI/Microsoft/Boot/BOOTX64.CSV

		configdir=boot-images/templates/grub/"$ts_grubtheme"
		for file in `find $configdir -type f |sed -e "s|$configdir||g"`; do
			sys_copy ${configdir}${file} "$ESP/boot/grub2/$file"
			sys_copy ${configdir}${file} "$ESP/boot/grub2/$file"
		done
		sys_copy /usr/share/grub/unicode.pf2 $ESP/boot/grub2/fonts/unicode.pf2

		if is_enabled $ts_earlymicrocode ; then
			sed -i -e "s:/boot/initrd:/boot/ucode /boot/initrd:" $ESP/boot/grub2/grub.cfg
		fi
		sed -i -e "s:/boot/initrd:/${ts_bootprefix}boot/initrd:" $ESP/boot/grub2/grub.cfg
		sed -i -e "s:/boot/ucode:/${ts_bootprefix}boot/ucode:" $ESP/boot/grub2/grub.cfg
		sed -i -e "s:/boot/vmlinuz:/${ts_bootprefix}boot/vmlinuz:" $ESP/boot/grub2/grub.cfg
		sed -i -e "s/\$KERNEL_PARAMETERS/$KERNEL_PARAMETERS/g" $ESP/boot/grub2/grub.cfg

		if [ -n "$ts_grubpasswd" ]; then
			passhash=`echo -e "$ts_grubpasswd\n$ts_grubpasswd\n" |grub-mkpasswd-pbkdf2 |cut -d " " -f7|tail -n1`
			echo 'set superusers="Admin"' >> $ESP/boot/grub2/grub.cfg
			echo "password_pbkdf2 Admin $passhash" >> $ESP/boot/grub2/grub.cfg
		fi
		for module in `grep $ESP/boot/grub2/grub.cfg -e insmod |awk '{print $2}'`; do
                        sys_copy /usr/lib/grub/i386-pc/$module.mod $ESP/boot/grub2/i386-pc/$module.mod
                done

		sys_copy /boot/efi/EFI/fedora/grubx64.efi $ESP/EFI/BOOT/grubx64.efi
		sys_copy /boot/efi/EFI/fedora/grubx64.efi $ESP/EFI/Microsoft/Boot/grubx64.efi

		ELTORITO="-eltorito-alt-boot \
				-eltorito-platform efi \
				-b EFI/BOOT/CDBOOT.EFI \
				-no-emul-boot"

		HYBRID_EFI="--uefi"

		lsize=`du -s $ESP |cut -f1`
		let lsize+=1024
		dd if=/dev/zero of=$INITDIR/boot.efi bs=1K count=$lsize
		lodev=`losetup -f`
		losetup $lodev $INITDIR/boot.efi
		mkfs.vfat -I ${lodev} -n 'EFI'
		mkdir -p temp-efi
		mount ${lodev} temp-efi
		cp -a $ESP/* temp-efi
		umount temp-efi
		losetup -d $lodev
		rmdir temp-efi

		sys_copy $INITDIR/boot.efi $ESP/EFI/BOOT/CDBOOT.EFI
		sys_copy $ESP/boot/grub2/grub.cfg $ESP/EFI/fedora/grub.cfg
		for module in `grep $ESP/EFI/fedora/grub.cfg -e insmod |awk '{print $2}'`; do
			sys_copy /usr/lib/grub/x86_64-efi/$module.mod $ESP/EFI/fedora/x86_64-efi/$module.mod
		done
		find $ESP/EFI -type f -exec chmod 644 {} \;
	fi
}

# Skips Images if NOIMAGES is set, useful for TS-O-Matic
if [ -z "$NOIMAGES" ]; then
	remove_old_boot_files
	for image in $ts_bootimages; do
		echo -e "\nMaking boot image for $image Type....\n"
		case $image in
			grub)
                                ESP=boot-images/grub/efi-source
                                wrap_efi

                                add_image
				add_overlay

#				rufus_exe=`find /usr/share/rufus -type f 2>/dev/null`
#				sys_copy $rufus_exe $ESP/rufus/`basename $rufus_exe`

                                addpkgs $ESP

				export MODULES="biosdisk $grub_modules $ts_grubextra"

				grub2-mkimage -p /boot/grub2 -O i386-pc-eltorito -o $ESP/boot/grub2/cdboot.img $MODULES iso9660 udf
				echo $ESP/boot/grub2/cdboot.img >> boot-images/initrd/added.files

				grub2-mkimage -p \(hd0,msdos1\)/boot/grub2 -O i386-pc -o $ESP/boot/grub2/core.img $MODULES
				echo $ESP/boot/grub2/core.img >> boot-images/initrd/added.files

				grub2-mkimage -p /boot/grub2 -O i386-pc-pxe -o  $ESP/boot/grub2/pxeboot.img $MODULES net tftp http pxe
				echo $ESP/boot/grub2/pxeboot.img >> boot-images/initrd/added.files

				sys_copy /usr/lib/grub/i386-pc/boot.img $ESP/boot/grub2/boot.img
				sys_copy /usr/lib/grub/i386-pc/normal.mod $ESP/boot/grub2/i386-pc/normal.mod

				grub2-mkimage -p\(hd0,msdos1\)/boot/grub2 -O i386-pc -o	/tmp/.hybrid-core.img $MODULES iso9660 udf

                                xorriso -as mkisofs -V "$ts_cdvolname" \
                                        -o $ESP/../thinstation-efi.iso \
                                        -eltorito-boot boot/grub2/cdboot.img \
                                        -c boot/boot.cat \
                                        -no-emul-boot \
                                        -boot-load-size 4 \
                                        -boot-info-table \
					--grub2-boot-info /tmp/.hybrid-core.img \
					--grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
                                        -joliet \
                                        -rock \
                                        $ELTORITO \
                                        -f \
                                        -quiet \
                                        $ESP

                                echo $ESP/../thinstation-efi.iso >> boot-images/initrd/added.files
			;;

		esac
	done
fi

remove_files

# Echo PKG variables for .conf file to screen
echo -e "\nNotes about build:"
if [ -n "$PKGFILES" ]; then
	echo "Your PKG_PACKAGES for the .conf file should be"
	echo -e "PKG_PACKAGES=\"$PKGFILES\"\n"
fi
if [ -n "$MODFILES" ]; then
	echo "Your MOD_PACKAGES for the .conf file should be"
	echo "MOD_PACKAGES=\"$MODFILES\""
fi

echo "Kernel $KERNVER size is `du -L --apparent-size -BK /boot/vmlinuz-$KERNVER |cut -f1`"

echo "Initrd size is `du --apparent-size -BK boot-images/initrd/initrd |cut -f1`"
if [ "$ts_fastboot" == "true" ] || [ "$ts_fastboot" == "lotsofmem" ] ; then
	echo "Squash size is `du --apparent-size -BK boot-images/initrd/lib.squash |cut -f1`"
fi
echo -e "\nBuild Complete!"
