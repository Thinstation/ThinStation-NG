#! /bin/sh

. `dirname $0`/common
. /etc/horizon.functions

HOME=/etc/skel

if [ -n $DEBUG_NETWORK ] ; then
	debug="-d"
fi

if ! pkg_initialized $PACKAGE; then
	pkg_set_init_flag $PACKAGE

	if [ ! -e $HOME/.omnissa ] ; then
		mkdir -p $HOME/.omnissa
	fi

	(ls -1 /etc/omnissa/*.vdm 2>/dev/null) |
	while read filename ; do
		cp $filename $HOME/.omnissa/.
	done

	if [ -n "$PKCS11_MODULE" ] && [ -e "$PKCS11_MODULE" ]; then
		mkdir -p /lib64/omnissa/horizon/pkcs11
		ln -s $PKCS11_MODULE /lib64/omnissa/horizon/pkcs11/
	fi

	if [ -z "$HORIZON_AUTOCONNECT" ]; then HORIZON_AUTOCONNECT="TRUE"; fi
	if [ -z "$HORIZON_SSLVERIFYMODE" ]; then HORIZON_SSLVERIFYMODE=3; fi
	if [ ! -e $HOME/.omnissa/horizon-preferences ]; then
		echo "view.autoConnectBroker = \"$HORIZON_AUTOCONNECT\"" > $HOME/.omnissa/horizon-preferences
		# ignore bad ssl certificate
		echo "view.sslVerificationMode = \"$HORIZON_SSLVERIFYMODE\"" >> $HOME/.omnissa/horizon-preferences
		if [ -n "$HORIZON_DEFAULTBROKER" ]; then
			echo "view.defaultBroker = \"$HORIZON_DEFAULTBROKER\"" >> $HOME/.omnissa/horizon-preferences
		fi
		if [ -n "$HORIZON_SSLPROTOCOL" ]; then
		    echo "view.sslProtocolString = \"$HORIZON_SSLPROTOCOL\"" >> $HOME/.omnissa/horizon-preferences
		fi
		if [ -n "$HORIZON_SSLCIPHERS" ]; then
		    echo "view.sslCipherString = \"$HORIZON_SSLCIPHER\"" >> $HOME/.omnissa/horizon-preferences
		fi
		if [ -n "$HORIZON_DATASHARING" ]; then
		    echo "view.enableDataSharing = \"$HORIZON_DATASHARING\"" >> $HOME/.omnissa/horizon-preferences
		fi

	fi

	let x=0
	while [ -n "`eval echo '$SESSION_'$x'_TYPE'`" ] ; do
		VDITYPE=`eval echo '$SESSION_'$x'_TYPE'`
		if [ "`make_caps $VDITYPE`" == "HORIZON" ] ; then
			VDITITLE=`eval echo '$SESSION_'$x'_TITLE'`
			VDITITLE=`replace_char "$VDITITLE" " " "_"`
			VDIPARAMS=/tmp/VDI$VDITITLE
			VDICONFIG=$HOME/.omnissa/$VDITITLE.vdm
			VDIICON=`eval echo '$SESSION_'$x'_ICON'`
			touch $VDICONFIG

			set | grep "SESSION_"$x"_HORIZON_"  > $VDIPARAMS
			while read session; do
				line=`echo $session | cut -f4- -d"_"`
				vdioption=${line%%=*}
				vdioption=`make_lower $vdioption`
				var="\$${session%%=*}"
				vdivalue=`eval echo $var`
				# fix for mixed case (case sensitive) parameters
				if [ "$vdioption" == "serverurl" ] ; then vdioption="serverURL" ; VDISERVER=$vdivalue ; fi
				if [ "$vdioption" == "noninteractive" ] ; then vdioption="nonInteractive" ; fi
				if [ "$vdioption" == "desktopname" ] ; then vdioption="desktopName" ; fi
				if [ "$vdioption" == "domainname" ] ; then vdioption="domainName" ; fi
				if [ "$vdioption" == "desktopsize" ] ; then vdioption="desktopSize" ; fi
				if [ "$vdioption" == "username" ] ; then vdioption="userName" ; fi
				if [ "$vdioption" == "mmrpath" ] ; then vdioption="mmrPath" ; fi
				if [ "$vdioption" == "rdesktopoptions" ] ; then vdioption="rdesktopOptions" ; fi
				if [ "$vdioption" == "xfreerdpoptions" ] ; then vdioption="xfreerdpOptions" ; fi
				if [ "$vdioption" == "printenvironmentinfo" ] ; then vdioption="printEnvironmentInfo" ; fi
				if [ "$vdioption" == "kbdlayout" ] ; then vdioption="kbdLayout" ; fi
				if [ "$vdioption" == "kiosklogin" ] ; then vdioption="kioskLogin" ; fi
				if [ "$vdioption" == "enablenla" ] ; then vdioption="enableNla" ; fi
				if [ "$vdioption" == "lockserver" ] ; then vdioption="lockServer" ; fi
				if [ "$vdioption" == "sslprotocolstring" ] ; then vdioption="sslProtocolString" ; fi
				if [ "$vdioption" == "sslcipherstring" ] ; then vdioption="sslCipherString" ; fi

				case $vdioption in
				fullscreen|allmonitors|nonInteractive|unattended|keep-wm-bindings|once|printEnvironmentInfo|enableNla|kioskLogin|save|nomenubar|lockServer)
					# some parameters don't have values
					value=`make_lower $vdivalue`
					if [ "$value" == "true" ] || [ "$value" == "on" ] ; then
						echo "--$vdioption" >> $VDICONFIG
					fi
				;;
				options)
					# ignore
				;;
				*)
				# allow for multiple REDIRECT
				if [ `expr match "$vdioption" 'redirect'` == "8" ] ; then
					echo "--redirect='$vdivalue'" >> $VDICONFIG
				# allow for multiple USB
				elif [ `expr match "$vdioption" 'usb'` == "3" ] ; then
					echo "--usb='$vdivalue'" >> $VDICONFIG
				# server to populate command argument for desktop icon
				elif [ "$vdioption" == "server" ] ; then
					echo ""
				# the rest are just option=value
				else
					if [ -z "`echo $vdivalue | grep ' '`" ]; then
						echo "--$vdioption=$vdivalue" >> $VDICONFIG
					else
						echo "--$vdioption='$vdivalue'" >> $VDICONFIG
					fi
				fi
				;;
				esac
			done < $VDIPARAMS
		fi
		let x=x+1
	done
	vdi_menu
fi
