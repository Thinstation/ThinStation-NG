#!/bin/sh

# Mount essential filesystems
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

# Parse machine_id from /proc/cmdline
if [ -e /proc/cmdline ]; then
    MACHINE_ID=$(awk -F'machine_id=' '{if (NF>1) print $2}' /proc/cmdline | awk '{print $1}')
    if [ -n "$MACHINE_ID" ] && [ "$MACHINE_ID" != "10000000000000000000000000000001" ]; then
        echo "$MACHINE_ID" > /etc/machine-id
        chmod 0444 /etc/machine-id
    fi
    if grep -q /proc/cmdline -e quiet; then
	clear
    fi
fi

# Input file where capabilities are stored
CAP_FILE="/etc/filecaps"
if [ -e $CAP_FILE ]; then
	# Read each line in the CAP_FILE
	while IFS= read -r line; do
	    # Extract the file path and capability string using parameter expansion
	    file_path="${line% *}"  # Everything before the last space
	    caps="${line##* }"      # Everything after the last space

	    # Apply the capabilities to the file if the file exists
	    if [ -n "$caps" ] && [ -e "$file_path" ]; then
	        setcap "$caps" "$file_path"
	    fi
	done < "$CAP_FILE"
fi

# Define the input file containing the xattrs
XATTR_FILE="/etc/filexattrs"
if [ -e $XATTR_FILE ]; then
	# Process each line from the attribute file
	while IFS= read -r line; do
	    # Extract the filename and attribute
	    filename=$(echo "$line" | awk '{print $1}')
	    attr=$(echo "$line" | awk '{$1=""; print substr($0, 2)}')  # Remove the first field and leading space

	    # Split the attribute into name and value
	    attr_name=$(echo "$attr" | cut -d'=' -f1)
	    attr_value=$(echo "$attr" | cut -d'=' -f2- | tr -d '"')

	    # Restore the attribute using setfattr
	    if ! setfattr -n "$attr_name" -v "$attr_value" "$filename"; then
        	echo "Failed to restore $attr_name for $filename"
	    fi
	done < "$XATTR_FILE"
fi

# Hand over control to systemd
exec /lib64/systemd/systemd
