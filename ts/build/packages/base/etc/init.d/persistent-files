#!/bin/bash

# Directory where the files will be copied and linked
BACKUP_DIR="/var/prstnt"

# Array of files to check and manage
# Source the main persistent files list
if [ -f /etc/persistent-files.conf ]; then
    mapfile -t main_files < <(grep -Ev '^\s*#|^\s*$' /etc/persistent-files.conf)
    FILES+=("${main_files[@]}")
fi

# Source additional persistent files lists
if [ -d "/etc/persistent-files.d" ]; then
    for file in /etc/persistent-files.d/*; do
        if [ -f "$file" ]; then
            mapfile -t extra_files < <(grep -Ev '^\s*#|^\s*$' "$file")
            FILES+=("${extra_files[@]}")
        fi
    done
fi

# Remove duplicates from FILES (optional)
FILES=($(printf "%s\n" "${FILES[@]}" | sort -u))

validate_dirs() {
    local valid_dirs=()
    declare -A DIRS

    # Extract directories from FILES and check if they exist
    for file in "${FILES[@]}"; do
        dir=$(dirname "$file")
        if [ -d "$dir" ]; then
            DIRS["$dir"]=1
        else
            echo "Warning: Directory $dir does not exist. Skipping."
        fi
    done

    # Update DIRS array with only valid directories
    valid_dirs=("${!DIRS[@]}")
    echo "${valid_dirs[@]}"
}

monitor_files() {
    # Validate directories and update the list to monitor
    DIR_LIST=($(validate_dirs))

    if [ ${#DIR_LIST[@]} -eq 0 ]; then
        echo "No valid directories to monitor. Exiting."
        exit 0
    fi

    echo "Monitoring directories: ${DIR_LIST[*]}"

    # Monitor directories for changes (non-recursive)
    inotifywait -m -e modify,create,delete "${DIR_LIST[@]}" | while read -r directory event filename; do
        filepath="${directory}${filename}"

        # Check if the file is in the FILES array
        if [[ " ${FILES[*]} " == *" $filepath "* ]]; then
            case "$event" in
                MODIFY|CLOSE_WRITE,CLOSE)
                    echo "Detected $event on $filepath. Running backup..."
                    backup_file "$filepath"
                    ;;
                CREATE|CREATE,ISDIR)
                    echo "Detected $event on $filepath. Creating and backing up..."
                    touch "$filepath"
                    backup_file "$filepath"
                    ;;
                DELETE|DELETE,ISDIR)
                    echo "Detected $event on $filepath. Deleting backup..."
                    local BACKUP_FILE="${BACKUP_DIR}/${filepath}"
                    if [ -f "$BACKUP_FILE" ]; then
                        rm -f "$BACKUP_FILE"
                        echo "Backup deleted for $filepath"
                    else
                        echo "No backup exists for $filepath"
                    fi
                    ;;
                *)
                    echo "Unhandled event $event on $filepath"
                    ;;
            esac
        else
            : #echo "Ignored event $event on $filepath"
        fi
    done
}

backup_file() {
    local SOURCE_FILE="${1}"

    # Construct the backup destination path
    local BACKUP_FILE="${BACKUP_DIR}/${SOURCE_FILE}"

    # Ensure the directory structure exists in the backup directory
    mkdir -p "$(dirname "${BACKUP_FILE}")"

    # Check if the source and destination files differ
    if ! cmp -s "${SOURCE_FILE}" "${BACKUP_FILE}"; then
        cp -a "${SOURCE_FILE}" "${BACKUP_FILE}"
    fi
}

backup_files() {
    # Backup each file using backup_file function
    for FILE in "${FILES[@]}"; do
        backup_file "${FILE}"
    done
}

restore_files() {
    for FILE in "${FILES[@]}"; do
        local BACKUP_FILE="${BACKUP_DIR}/${FILE}"
        # Ensure the directory structure exists in the target directory
        mkdir -p "$(dirname "${FILE}")"

        if [ -f "${BACKUP_FILE}" ]; then
            # Restore file if we have a backup
            cp -a "${BACKUP_FILE}" "${FILE}"
        fi
    done
}

convert_to_username() {
    local name="$1"
    # Convert to lowercase, replace spaces/hyphens with underscores, remove invalid characters, and limit length
    username=$(echo "$name" | tr '[:upper:]' '[:lower:]' | tr -s ' -' '_' | sed 's/[^a-z0-9_]//g' | cut -c1-32)
    echo "$username"
}

firstrun() {
    # Update security files with the new Administrative User
    if [ -f "${BACKUP_DIR}/firstrun" ]; then
        # Update root password hash
        local rstring="$(grep -E '^root' "${BACKUP_DIR}/firstrun")"
        local rpass="$(echo "${rstring}" | cut -d ':' -f2)"
        /sbin/usermod -p "${rpass}" root

        # Update Admin user name and password hash
        local ustring="$(grep -Ev '^root' "${BACKUP_DIR}/firstrun")"
        local userc="$(echo "${ustring}" | cut -d ':' -f1)"
        local user="$(convert_to_username "${userc}")"
        local pass="$(echo "${ustring}" | cut -d ':' -f2)"

        /sbin/groupmod -n "${user}" tsuser
        /sbin/usermod -l "${user}" -m -d /home/"${user}" tsuser
        /sbin/usermod -c "${userc}" "${user}"
        /sbin/usermod -p "${pass}" "${user}"

        # Replace 'tsuser' in the environment file with new username
        sed -i -e "s/tsuser/${user}/g" /etc/thinstation.env

        # Clean up the first run file and back up other files
        rm "${BACKUP_DIR}/firstrun"
        backup_files
    fi
}

case $1 in
    backup)
        backup_files
        ;;
    restore)
        restore_files
        firstrun
        ;;
    monitor)
        monitor_files
        ;;
    *)
        echo "Usage: $0 {backup|restore|monitor}"
        exit 0
        ;;
esac
